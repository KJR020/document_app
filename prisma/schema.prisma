generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーモデル
model User {
  id           Int      @id @default(autoincrement())
  username     String
  email        String   @unique
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")

  // リレーション
  documents          Document[]
  documentChanges    DocumentChange[]
  directories        Directory[]
  directoryChanges   DirectoryChange[]
  directoryHierarchy DirectoryHierarchy[]
  directoryMoves     DirectoryMove[]

  @@map("users")
}

// ドキュメントモデル
model Document {
  id        Int      @id @default(autoincrement())
  createdBy Int      @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  // リレーション
  user           User                    @relation(fields: [createdBy], references: [id])
  versions       DocumentVersion[]
  currentVersion CurrentDocumentVersion?
  changes        DocumentChange[]
  order          DocumentOrder?

  @@map("documents")
}

// ドキュメントバージョンモデル
model DocumentVersion {
  id                Int      @id @default(autoincrement())
  documentId        Int      @map("document_id")
  name              String
  content           String
  parentDirectoryId Int      @map("parent_directory_id")
  documentChangeId  Int      @map("document_change_id")
  createdAt         DateTime @default(now()) @map("created_at")

  // リレーション
  document        Document                @relation(fields: [documentId], references: [id])
  currentVersion  CurrentDocumentVersion?
  parentDirectory Directory               @relation(fields: [parentDirectoryId], references: [id])
  documentChanges DocumentChange[]        @relation("DocumentVersionChanges")

  @@map("document_versions")
}

// 現在のドキュメントバージョンモデル
model CurrentDocumentVersion {
  documentId Int      @id @map("document_id")
  versionId  Int      @unique @map("version_id")
  appliedAt  DateTime @updatedAt @map("applied_at")

  // リレーション
  document Document        @relation(fields: [documentId], references: [id])
  version  DocumentVersion @relation(fields: [versionId], references: [id])

  @@map("current_document_versions")
}

// ドキュメント変更履歴モデル
model DocumentChange {
  id         Int      @id @default(autoincrement())
  documentId Int      @map("document_id")
  changeType String   @map("change_type")
  changedBy  Int      @map("changed_by")
  changedAt  DateTime @default(now()) @map("changed_at")

  // リレーション
  document          Document         @relation(fields: [documentId], references: [id])
  user              User             @relation(fields: [changedBy], references: [id])
  documentVersion   DocumentVersion? @relation("DocumentVersionChanges", fields: [documentVersionId], references: [id])
  documentVersionId Int?

  @@map("document_changes")
}

// ドキュメントの順序管理モデル
model DocumentOrder {
  documentId Int      @id @map("document_id")
  orderValue String   @map("order_value")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // リレーション
  document Document @relation(fields: [documentId], references: [id])

  @@map("document_orders")
}

// ディレクトリモデル
model Directory {
  id        Int      @id @default(autoincrement())
  name      String
  createdBy Int      @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  // リレーション
  user           User                     @relation(fields: [createdBy], references: [id])
  versions       DirectoryVersion[]
  currentVersion CurrentDirectoryVersion?
  changes        DirectoryChange[]
  ancestors      DirectoryHierarchy[]     @relation("ancestor")
  descendants    DirectoryHierarchy[]     @relation("descendant")
  fromMoves      DirectoryMove[]          @relation("fromDirectory")
  toMoves        DirectoryMove[]          @relation("toDirectory")
  targetMoves    DirectoryMove[]          @relation("targetDirectory")
  documents      DocumentVersion[]

  @@map("directories")
}

// ディレクトリバージョンモデル
model DirectoryVersion {
  id                Int      @id @default(autoincrement())
  directoryId       Int      @map("directory_id")
  name              String
  directoryChangeId Int      @map("directory_change_id")
  createdAt         DateTime @default(now()) @map("created_at")

  // リレーション
  directory        Directory                @relation(fields: [directoryId], references: [id])
  currentVersion   CurrentDirectoryVersion?
  directoryChanges DirectoryChange[]

  @@map("directory_versions")
}

// 現在のディレクトリバージョンモデル
model CurrentDirectoryVersion {
  directoryId Int      @id @map("directory_id")
  versionId   Int      @unique @map("version_id")
  appliedAt   DateTime @updatedAt @map("applied_at")

  // リレーション
  directory Directory        @relation(fields: [directoryId], references: [id])
  version   DirectoryVersion @relation(fields: [versionId], references: [id])

  @@map("current_directory_versions")
}

// ディレクトリ変更履歴モデル
model DirectoryChange {
  id          Int      @id @default(autoincrement())
  directoryId Int      @map("directory_id")
  versionId   Int      @map("version_id")
  changeType  String   @map("change_type")
  changedBy   Int      @map("changed_by")
  changedAt   DateTime @default(now()) @map("changed_at")

  // リレーション
  directory Directory        @relation(fields: [directoryId], references: [id])
  version   DirectoryVersion @relation(fields: [versionId], references: [id])
  user      User             @relation(fields: [changedBy], references: [id])

  @@map("directory_changes")
}

// ディレクトリの階層構造モデル（閉包テーブル）
model DirectoryHierarchy {
  ancestorId   Int      @map("ancestor_id")
  descendantId Int      @map("descendant_id")
  depth        Int
  createdAt    DateTime @default(now()) @map("created_at")

  // リレーション
  ancestor   Directory @relation("ancestor", fields: [ancestorId], references: [id])
  descendant Directory @relation("descendant", fields: [descendantId], references: [id])
  user       User?     @relation(fields: [createdBy], references: [id])
  createdBy  Int?      @map("created_by")

  @@id([ancestorId, descendantId])
  @@map("directory_hierarchy")
}

// ディレクトリ移動モデル
model DirectoryMove {
  id                Int      @id @default(autoincrement())
  targetDirectoryId Int      @map("target_directory_id")
  fromDirectoryId   Int      @map("from_directory_id")
  toDirectoryId     Int      @map("to_directory_id")
  movedBy           Int      @map("moved_by")
  movedAt           DateTime @default(now()) @map("moved_at")

  // リレーション
  targetDirectory Directory @relation("targetDirectory", fields: [targetDirectoryId], references: [id])
  fromDirectory   Directory @relation("fromDirectory", fields: [fromDirectoryId], references: [id])
  toDirectory     Directory @relation("toDirectory", fields: [toDirectoryId], references: [id])
  user            User      @relation(fields: [movedBy], references: [id])

  @@map("directory_moves")
}
